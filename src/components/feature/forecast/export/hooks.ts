import { useState } from 'react';
import { toast } from '@/lib/toast';
import { ForecastResponse } from '@/types/api';
import { ExportOptions, ExportState } from './types';

export const useExportState = (): ExportState & {
  setExportFormat: (_format: string) => void;
  setOptions: (_options: Partial<ExportOptions>) => void;
  setIsExporting: (_exporting: boolean) => void;
} => {
  const [exportFormat, setExportFormat] = useState<string>('csv');
  const [options, setOptions] = useState<ExportOptions>({
    includeCharts: true,
    includeSummary: true,
    includeConfidence: true
  });
  const [isExporting, setIsExporting] = useState<boolean>(false);

  const updateOptions = (newOptions: Partial<ExportOptions>) => {
    setOptions(prev => ({ ...prev, ...newOptions }));
  };

  return {
    exportFormat,
    options,
    isExporting,
    setExportFormat,
    setOptions: updateOptions,
    setIsExporting
  };
};

export const useDataGenerators = (
  forecastData: ForecastResponse,
  productName: string,
  options: ExportOptions
) => {
  const generateCSV = (): string => {
    const headers = [
      'Date',
      'Predicted Demand',
      ...(options.includeConfidence ? ['Confidence Lower', 'Confidence Upper'] : []),
      'Projected Revenue',
      'Model Used'
    ];

    const rows = forecastData.forecastData.map((point, index) => {
      const revenue = forecastData.revenueProjection?.[index];
      return [
        point.date,
        point.predictedValue,
        ...(options.includeConfidence ? [
          point.confidenceLower || '',
          point.confidenceUpper || ''
        ] : []),
        revenue?.projectedRevenue || '',
        point.modelUsed || ''
      ];
    });

    const csvContent = [headers, ...rows]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n');

    return csvContent;
  };

  const generateJSON = (): string => {
    const exportData = {
      metadata: {
        productName,
        generatedAt: new Date().toISOString(),
        forecastHorizon: forecastData.metadata?.forecastHorizon,
        modelsUsed: forecastData.modelsUsed,
        confidence: forecastData.confidence,
        scenario: forecastData.scenario
      },
      forecast: forecastData.forecastData,
      revenue: options.includeSummary ? forecastData.revenueProjection : undefined,
      summary: options.includeSummary ? forecastData.summary : undefined
    };

    return JSON.stringify(exportData, null, 2);
  };

  const generatePDFContent = (): string => {
    return `
AGRI PREDICT FORECAST REPORT
============================

Product: ${productName}
Generated: ${new Date().toLocaleString()}
Scenario: ${forecastData.scenario || 'Realistic'}
Confidence: ${Math.round((forecastData.confidence || 0) * 100)}%

FORECAST SUMMARY
${forecastData.summary}

KEY METRICS
- Total Forecast Days: ${forecastData.metadata?.forecastHorizon || 'N/A'}
- Average Daily Demand: ${Math.round(forecastData.forecastData.reduce((sum, d) => sum + d.predictedValue, 0) / forecastData.forecastData.length)}
- Peak Demand: ${Math.max(...forecastData.forecastData.map(d => d.predictedValue))}
- Models Used: ${forecastData.modelsUsed?.join(', ') || 'N/A'}

REVENUE PROJECTION
${forecastData.revenueProjection?.map(r =>
  `${new Date(r.date).toLocaleDateString('en-GB')}: $${r.projectedRevenue.toLocaleString()} (${r.projectedQuantity} units)`
).join('\n') || 'No revenue data available'}

DETAILED FORECAST
${forecastData.forecastData.map(d =>
  `${new Date(d.date).toLocaleDateString('en-GB')}: ${d.predictedValue} units${d.confidenceLower ? ` (Range: ${d.confidenceLower}-${d.confidenceUpper})` : ''}`
).join('\n')}

---
Generated by AgriPredict Platform
    `.trim();
  };

  return {
    generateCSV,
    generateJSON,
    generatePDFContent
  };
};

export const useFileDownload = () => {
  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return { downloadFile };
};

export const useQuickActions = (productName: string, forecastData: ForecastResponse) => {
  const handleShare = () => {
    const shareData = {
      title: `${productName} Forecast Report`,
      text: `Check out this forecast for ${productName} generated by AgriPredict`,
      url: window.location.href
    };

    if (navigator.share) {
      navigator.share(shareData);
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(`${shareData.title}\n${shareData.text}\n${shareData.url}`);
      toast.success('Link copied to clipboard');
    }
  };

  const handleEmail = () => {
    const subject = encodeURIComponent(`${productName} Forecast Report`);
    const body = encodeURIComponent(`
Check out this forecast report for ${productName}:

${forecastData.summary}

View full report: ${window.location.href}
    `);

    window.open(`mailto:?subject=${subject}&body=${body}`);
  };

  return {
    handleShare,
    handleEmail
  };
};
