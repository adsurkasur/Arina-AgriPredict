// Test file for ExportCapabilities component
// This file can be used to test the export functionality

import { ForecastResponse } from '@/types/api';

// Sample forecast data for testing
export const sampleForecastData: ForecastResponse = {
  forecastData: [
    {
      date: '2024-01-01',
      predictedValue: 150,
      confidenceLower: 140,
      confidenceUpper: 160,
      modelUsed: 'ARIMA'
    },
    {
      date: '2024-01-02',
      predictedValue: 165,
      confidenceLower: 155,
      confidenceUpper: 175,
      modelUsed: 'ARIMA'
    },
    {
      date: '2024-01-03',
      predictedValue: 180,
      confidenceLower: 170,
      confidenceUpper: 190,
      modelUsed: 'Prophet'
    }
  ],
  summary: 'Sample forecast summary with AI insights',
  confidence: 0.85,
  scenario: 'Realistic',
  modelsUsed: ['ARIMA', 'Prophet'],
  revenueProjection: [
    {
      date: '2024-01-01',
      projectedRevenue: 1500,
      projectedQuantity: 150,
      sellingPrice: 10
    },
    {
      date: '2024-01-02',
      projectedRevenue: 1650,
      projectedQuantity: 165,
      sellingPrice: 10
    },
    {
      date: '2024-01-03',
      projectedRevenue: 1800,
      projectedQuantity: 180,
      sellingPrice: 10
    }
  ],
  metadata: {
    dataPoints: 100,
    forecastHorizon: 30,
    lastTrainingDate: '2024-01-01T00:00:00Z'
  }
};

// Test functions for export capabilities
export const testExportFunctions = {
  generateCSV: (data: ForecastResponse, includeConfidence = true) => {
    const headers = [
      'Date',
      'Predicted Demand',
      ...(includeConfidence ? ['Confidence Lower', 'Confidence Upper'] : []),
      'Projected Revenue',
      'Model Used'
    ];

    const rows = data.forecastData.map((point, index) => {
      const revenue = data.revenueProjection?.[index];
      return [
        point.date,
        point.predictedValue,
        ...(includeConfidence ? [
          point.confidenceLower || '',
          point.confidenceUpper || ''
        ] : []),
        revenue?.projectedRevenue || '',
        point.modelUsed || ''
      ];
    });

    return [headers, ...rows]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n');
  },

  generateJSON: (data: ForecastResponse, includeSummary = true) => {
    const exportData = {
      metadata: {
        generatedAt: new Date().toISOString(),
        forecastHorizon: data.metadata?.forecastHorizon,
        modelsUsed: data.modelsUsed,
        confidence: data.confidence,
        scenario: data.scenario
      },
      forecast: data.forecastData,
      revenue: includeSummary ? data.revenueProjection : undefined,
      summary: includeSummary ? data.summary : undefined
    };

    return JSON.stringify(exportData, null, 2);
  },

  generatePDFContent: (data: ForecastResponse, productName = 'Test Product') => {
    return `
AGRI PREDICT FORECAST REPORT
============================

Product: ${productName}
Generated: ${new Date().toLocaleString()}
Scenario: ${data.scenario || 'Realistic'}
Confidence: ${Math.round((data.confidence || 0) * 100)}%

FORECAST SUMMARY
${data.summary}

KEY METRICS
- Total Forecast Days: ${data.metadata?.forecastHorizon || 'N/A'}
- Average Daily Demand: ${Math.round(data.forecastData.reduce((sum, d) => sum + d.predictedValue, 0) / data.forecastData.length)}
- Peak Demand: ${Math.max(...data.forecastData.map(d => d.predictedValue))}
- Models Used: ${data.modelsUsed?.join(', ') || 'N/A'}

REVENUE PROJECTION
${data.revenueProjection?.map(r =>
  `${new Date(r.date).toLocaleDateString()}: $${r.projectedRevenue.toLocaleString()} (${r.projectedQuantity} units)`
).join('\n') || 'No revenue data available'}

DETAILED FORECAST
${data.forecastData.map(d =>
  `${new Date(d.date).toLocaleDateString()}: ${d.predictedValue} units${d.confidenceLower ? ` (Range: ${d.confidenceLower}-${d.confidenceUpper})` : ''}`
).join('\n')}

---
Generated by AgriPredict Platform
    `.trim();
  }
};

// Console test runner
export const runExportTests = () => {
  console.log('ðŸ§ª Running ExportCapabilities Tests...\n');

  // Test CSV generation
  console.log('ðŸ“Š Testing CSV Export:');
  const csv = testExportFunctions.generateCSV(sampleForecastData);
  console.log('CSV Output:');
  console.log(csv);
  console.log('\n');

  // Test JSON generation
  console.log('ðŸ“‹ Testing JSON Export:');
  const json = testExportFunctions.generateJSON(sampleForecastData);
  console.log('JSON Output:');
  console.log(json);
  console.log('\n');

  // Test PDF content generation
  console.log('ðŸ“„ Testing PDF Content Generation:');
  const pdfContent = testExportFunctions.generatePDFContent(sampleForecastData);
  console.log('PDF Content:');
  console.log(pdfContent);
  console.log('\n');

  console.log('âœ… All export tests completed!');
};

// Uncomment the line below to run tests in browser console
// runExportTests();
